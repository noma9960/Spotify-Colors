[{"/Users/nmargalit/spotify-colors/src/index.js":"1","/Users/nmargalit/spotify-colors/src/App.js":"2","/Users/nmargalit/spotify-colors/src/reportWebVitals.js":"3","/Users/nmargalit/spotify-colors/src/Colors.js":"4","/Users/nmargalit/spotify-colors/src/hash.js":"5","/Users/nmargalit/spotify-colors/src/config.js":"6"},{"size":500,"mtime":1617558059049,"results":"7","hashOfConfig":"8"},{"size":764,"mtime":1619391799503,"results":"9","hashOfConfig":"8"},{"size":362,"mtime":1617558059050,"results":"10","hashOfConfig":"8"},{"size":4384,"mtime":1619483305077,"results":"11","hashOfConfig":"8"},{"size":319,"mtime":1618778566887,"results":"12","hashOfConfig":"8"},{"size":369,"mtime":1618779397845,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"tevojy",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"21","messages":"22","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/Users/nmargalit/spotify-colors/src/index.js",[],["28","29"],"/Users/nmargalit/spotify-colors/src/App.js",[],"/Users/nmargalit/spotify-colors/src/reportWebVitals.js",[],"/Users/nmargalit/spotify-colors/src/Colors.js",["30","31","32","33","34"],"import logo from './logo.svg';\nimport './Colors.css';\nimport React, {Component} from \"react\";\nimport { TrackFeatures } from 'react-spotify-api'\n\nclass Colors extends Component {\n  constructor(props){\n    super(props)\n\n    this.state = {\n      hue: \"\",\n      saturation: \"\",\n      lightness: \"\",\n      color: \"\",\n      id: \"\",\n      link: \"\",\n      display: true\n    }\n  }\n\n  handleLinkChange(e){\n    var link = e.target.value;\n    this.state.link=link;\n  }\n\n  getSpotifyData()\n  {\n    if (this.state.link!=null){\n      if (this.state.link.split(\"/\").length>4){\n      \n      var songID = this.state.link.split(\"/\")[4];\n      songID = songID.split(\"?\")[0];\n      \n      this.setState({id: songID});\n      }\n    }\n\n  }\n\n  findColor(features)\n { //fetching from api, based on those values, change state of\n  console.log(\"Find Color\");\n  console.log(features.data);\n  \n  if (features.data!== null)\n  {\n\n  if (features.data.key !== undefined )\n  {\n\n  var songKey = features.data.key;\n  var tempo = features.data.tempo;\n  var energy = features.data.energy;\n\n  var hue=0;\n  var saturation=0;\n  var lightness=0;\n\n  //Key\n  if(songKey <= 0){\n    hue= 0;\n  }\n  else if(songKey > 0 && songKey <= 1){\n    hue= 30;\n  }\n  else if(songKey > 1 && songKey <= 2){\n    hue= 60;\n  }\n  else if(songKey > 2 && songKey <= 3){\n    hue= 90;\n  }\n  else if(songKey > 3 && songKey <= 4){\n    hue= 120;\n  }\n  else if(songKey > 4 && songKey <= 5){\n    hue= 150;\n  }\n  else if(songKey > 5 && songKey <= 6){\n    hue= 180;\n  }\n  else if(songKey > 6 && songKey <= 7){\n    hue= 210;\n  }\n  else if(songKey > 7 && songKey <= 8){\n    hue= 240;\n  }\n  else if(songKey > 8 && songKey <= 9){\n    hue= 270;\n  }\n  else if(songKey > 9 && songKey <= 10){\n    hue= 300;\n  }\n  else if(songKey > 10 && songKey <= 11){\n    hue= 330;\n  }\n  else if(songKey > 11 && songKey <= 12){\n    hue= 360;\n  }\n  \n    //Tempo\n  if(tempo > 0 && tempo <= 80){\n    saturation= 20;\n  }\n\n  else if(tempo > 80 && tempo <= 100){\n    saturation= 35;\n  } \n\n  else if(tempo > 100 && tempo <= 150){\n    saturation= 40;\n  } \n\n  else if(tempo > 150 && tempo <= 170){\n    saturation= 60;\n  } \n\n  else if(tempo > 150 && tempo <= 190){\n    saturation= 80;\n  }\n\n  else if(tempo > 190 && tempo <= 1000){\n    saturation= 100;\n  }\n\n  //Energy\n  if(energy > 0 && energy <= 0.1){\n    lightness= 10;\n  }\n\n  else if(energy > 0.1 && energy <= 0.2){\n    lightness= 20;\n  }\n\n  else if(energy > 0.2 && energy <= 0.3){\n    lightness= 30;\n  }\n\n  else if(energy > 0.3 && energy <= 0.4){\n    lightness= 40;\n  }\n  else if(energy > 0.4 && energy <= 0.5){\n    lightness= 50;\n  }\n  else if(energy > 0.5 && energy <= 0.6){\n    lightness= 60;\n  }\n  else if(energy > 0.6 && energy <= 0.7){\n    lightness= 70;\n  }\n  else if(energy > 0.7 && energy <= 0.8){\n    lightness= 80;\n  }\n  else if(energy > 0.8 && energy <= 0.9){\n    lightness= 90;\n  }\n  else if(energy > 0.9 && energy <= 1.0){\n    lightness= 100;\n  }\n\n\n  this.setState({hue: hue});\n  this.setState({saturation: saturation});\n  this.setState({lightness: lightness});\n  this.setState({color: `hsl(${(hue)}, ${(saturation)}%, ${(lightness)}%)`});\n  this.setState({display: false});\n  \n}\n  }\n}\n\ngoBack = () => {\n  this.state.id=null;\n  this.state.link=null; \n  this.setState({display: true});\n}\n\n  render() {\n    return(\n    <div className=\"Colors\">\n      {this.state.display ?\n       <div className=\"Colors-box\"> \n       <p className=\"p\">spotify colors</p>\n        <input type=\"text\" id=\"link\" name=\"link\" onChange={(e) => this.handleLinkChange(e)} placeholder=\"insert a spotify link!\"></input> <br/>\n         <button onClick={()=>this.getSpotifyData()} class=\"button\">find the color</button> \n        { this.state.id ? <TrackFeatures id={this.state.id}>\n          {(features) => (\n              this.findColor(features),\n              features ? (\n               \"\"                     \n              ) : null\n          )}\n      </TrackFeatures>  : null }  \n      </div> : <div className=\"ColorCreated\" style={{backgroundColor: this.state.color}}> <br/>\n      \n       <p className=\"p\">spotify colors</p>\n    \n       <p className=\"p1\" >your hue is {this.state.hue}  <br/>\n        your saturation is {this.state.saturation}  <br/>\n        your lightness is {this.state.lightness}  </p> \n\n          <button onClick={()=>this.goBack()} class=\"button\">go back</button>\n      </div>\n      }\n    </div>\n    )\n  }\n}\n\nexport default Colors;\n","/Users/nmargalit/spotify-colors/src/hash.js",[],"/Users/nmargalit/spotify-colors/src/config.js",[],{"ruleId":"35","replacedBy":"36"},{"ruleId":"37","replacedBy":"38"},{"ruleId":"39","severity":1,"message":"40","line":1,"column":8,"nodeType":"41","messageId":"42","endLine":1,"endColumn":12},{"ruleId":"43","severity":1,"message":"44","line":23,"column":5,"nodeType":"45","endLine":23,"endColumn":15},{"ruleId":"43","severity":1,"message":"44","line":172,"column":3,"nodeType":"45","endLine":172,"endColumn":13},{"ruleId":"43","severity":1,"message":"44","line":173,"column":3,"nodeType":"45","endLine":173,"endColumn":13},{"ruleId":"46","severity":1,"message":"47","line":187,"column":39,"nodeType":"48","messageId":"49","endLine":187,"endColumn":40},"no-native-reassign",["50"],"no-negated-in-lhs",["51"],"no-unused-vars","'logo' is defined but never used.","Identifier","unusedVar","react/no-direct-mutation-state","Do not mutate state directly. Use setState().","MemberExpression","no-sequences","Unexpected use of comma operator.","SequenceExpression","unexpectedCommaExpression","no-global-assign","no-unsafe-negation"]