{"ast":null,"code":"var _jsxFileName = \"/Users/nmargalit/spotify-colors/src/App.js\";\nimport React, { Component } from \"react\";\nimport \"./App.css\";\nimport Colors from \"./Colors.js\";\nimport request from \"request\";\nimport cors from \"cors\";\nimport querystring from \"querystring\";\nimport cookieParser from \"cookie-parser\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass App extends Component {\n  componentDidMount() {\n    this.oauthSpotify();\n  }\n\n  oauthSpotify() {\n    var client_id = 'ce10034c10894e4a9c47df1642fbc97c'; // Your client id\n\n    var client_secret = '0aecfca293fc407cbd0909ce7de11c1d'; // Your secret\n\n    var redirect_uri = 'http://localhost:3000/'; // Your redirect uri\n\n    /**\n     * Generates a random string containing numbers and letters\n     * @param  {number} length The length of the string\n     * @return {string} The generated string\n     */\n\n    var generateRandomString = function (length) {\n      var text = '';\n      var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n      for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n\n      return text;\n    };\n\n    var stateKey = 'spotify_auth_state';\n\n    var express = require('express');\n\n    var app = express();\n    app.use(express.static(__dirname + '/public')).use(cors()).use(cookieParser());\n    app.get('/login', function (req, res) {\n      var state = generateRandomString(16);\n      res.cookie(stateKey, state); // your application requests authorization\n\n      var scope = 'user-read-private user-read-email';\n      res.redirect('https://accounts.spotify.com/authorize?' + querystring.stringify({\n        response_type: 'code',\n        client_id: client_id,\n        scope: scope,\n        redirect_uri: redirect_uri,\n        state: state\n      }));\n    });\n    app.get('/callback', function (req, res) {\n      // your application requests refresh and access tokens\n      // after checking the state parameter\n      var code = req.query.code || null;\n      var state = req.query.state || null;\n      var storedState = req.cookies ? req.cookies[stateKey] : null;\n\n      if (state === null || state !== storedState) {\n        res.redirect('/#' + querystring.stringify({\n          error: 'state_mismatch'\n        }));\n      } else {\n        res.clearCookie(stateKey);\n        var authOptions = {\n          url: 'https://accounts.spotify.com/api/token',\n          form: {\n            code: code,\n            redirect_uri: redirect_uri,\n            grant_type: 'authorization_code'\n          },\n          headers: {\n            'Authorization': 'Basic ' + new Buffer(client_id + ':' + client_secret).toString('base64')\n          },\n          json: true\n        };\n        request.post(authOptions, function (error, response, body) {\n          if (!error && response.statusCode === 200) {\n            var access_token = body.access_token,\n                refresh_token = body.refresh_token;\n            var options = {\n              url: 'https://api.spotify.com/v1/me',\n              headers: {\n                'Authorization': 'Bearer ' + access_token\n              },\n              json: true\n            }; // use the access token to access the Spotify Web API\n\n            request.get(options, function (error, response, body) {\n              console.log(body);\n            }); // we can also pass the token to the browser to make requests from there\n\n            res.redirect('/#' + querystring.stringify({\n              access_token: access_token,\n              refresh_token: refresh_token\n            }));\n          } else {\n            res.redirect('/#' + querystring.stringify({\n              error: 'invalid_token'\n            }));\n          }\n        });\n      }\n    });\n    app.get('/refresh_token', function (req, res) {\n      // requesting access token from refresh token\n      var refresh_token = req.query.refresh_token;\n      var authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: {\n          'Authorization': 'Basic ' + new Buffer(client_id + ':' + client_secret).toString('base64')\n        },\n        form: {\n          grant_type: 'refresh_token',\n          refresh_token: refresh_token\n        },\n        json: true\n      };\n      request.post(authOptions, function (error, response, body) {\n        if (!error && response.statusCode === 200) {\n          var access_token = body.access_token;\n          res.send({\n            'access_token': access_token\n          });\n        }\n      });\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: /*#__PURE__*/_jsxDEV(Colors, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 151,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 5\n    }, this);\n  }\n\n}\n\nexport default App;","map":{"version":3,"sources":["/Users/nmargalit/spotify-colors/src/App.js"],"names":["React","Component","Colors","request","cors","querystring","cookieParser","App","componentDidMount","oauthSpotify","client_id","client_secret","redirect_uri","generateRandomString","length","text","possible","i","charAt","Math","floor","random","stateKey","express","require","app","use","static","__dirname","get","req","res","state","cookie","scope","redirect","stringify","response_type","code","query","storedState","cookies","error","clearCookie","authOptions","url","form","grant_type","headers","Buffer","toString","json","post","response","body","statusCode","access_token","refresh_token","options","console","log","send","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Colors from \"./Colors.js\";\nimport request from \"request\";\nimport cors from \"cors\";\nimport querystring from \"querystring\";\nimport cookieParser from \"cookie-parser\";\n\nclass App extends Component {\n\n  componentDidMount(){\n    this.oauthSpotify();\n  }\n\n  oauthSpotify(){\n    var client_id = 'ce10034c10894e4a9c47df1642fbc97c'; // Your client id\n    var client_secret = '0aecfca293fc407cbd0909ce7de11c1d'; // Your secret\n    var redirect_uri = 'http://localhost:3000/'; // Your redirect uri\n\n    /**\n     * Generates a random string containing numbers and letters\n     * @param  {number} length The length of the string\n     * @return {string} The generated string\n     */\n    var generateRandomString = function(length) {\n      var text = '';\n      var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n\n      for (var i = 0; i < length; i++) {\n        text += possible.charAt(Math.floor(Math.random() * possible.length));\n      }\n      return text;\n    };\n\n    var stateKey = 'spotify_auth_state';\n    var express = require('express');\n    var app = express();\n\n    app.use(express.static(__dirname + '/public'))\n      .use(cors())\n      .use(cookieParser());\n\n    app.get('/login', function(req, res) {\n\n      var state = generateRandomString(16);\n      res.cookie(stateKey, state);\n\n      // your application requests authorization\n      var scope = 'user-read-private user-read-email';\n      res.redirect('https://accounts.spotify.com/authorize?' +\n        querystring.stringify({\n          response_type: 'code',\n          client_id: client_id,\n          scope: scope,\n          redirect_uri: redirect_uri,\n          state: state\n        }));\n    });\n\n    app.get('/callback', function(req, res) {\n\n      // your application requests refresh and access tokens\n      // after checking the state parameter\n\n      var code = req.query.code || null;\n      var state = req.query.state || null;\n      var storedState = req.cookies ? req.cookies[stateKey] : null;\n\n      if (state === null || state !== storedState) {\n        res.redirect('/#' +\n          querystring.stringify({\n            error: 'state_mismatch'\n          }));\n      } else {\n        res.clearCookie(stateKey);\n        var authOptions = {\n          url: 'https://accounts.spotify.com/api/token',\n          form: {\n            code: code,\n            redirect_uri: redirect_uri,\n            grant_type: 'authorization_code'\n          },\n          headers: {\n            'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64'))\n          },\n          json: true\n        };\n\n        request.post(authOptions, function(error, response, body) {\n          if (!error && response.statusCode === 200) {\n\n            var access_token = body.access_token,\n                refresh_token = body.refresh_token;\n\n            var options = {\n              url: 'https://api.spotify.com/v1/me',\n              headers: { 'Authorization': 'Bearer ' + access_token },\n              json: true\n            };\n\n            // use the access token to access the Spotify Web API\n            request.get(options, function(error, response, body) {\n              console.log(body);\n            });\n\n            // we can also pass the token to the browser to make requests from there\n            res.redirect('/#' +\n              querystring.stringify({\n                access_token: access_token,\n                refresh_token: refresh_token\n              }));\n          } else {\n            res.redirect('/#' +\n              querystring.stringify({\n                error: 'invalid_token'\n              }));\n          }\n        });\n      }\n    });\n\n    app.get('/refresh_token', function(req, res) {\n\n      // requesting access token from refresh token\n      var refresh_token = req.query.refresh_token;\n      var authOptions = {\n        url: 'https://accounts.spotify.com/api/token',\n        headers: { 'Authorization': 'Basic ' + (new Buffer(client_id + ':' + client_secret).toString('base64')) },\n        form: {\n          grant_type: 'refresh_token',\n          refresh_token: refresh_token\n        },\n        json: true\n      };\n\n      request.post(authOptions, function(error, response, body) {\n        if (!error && response.statusCode === 200) {\n          var access_token = body.access_token;\n          res.send({\n            'access_token': access_token\n          });\n        }\n      });\n    });\n\n}\n\nrender() {\n  return (\n    <div className=\"App\">\n      <Colors></Colors>\n    </div>\n  );\n}\n\n}\n\nexport default App;"]},"metadata":{},"sourceType":"module"}